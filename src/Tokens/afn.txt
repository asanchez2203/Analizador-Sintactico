/*
    CLASE AFN
    Clase que modela el funcionamiento del analizador lexico
*/
package analizador;

import DataStructure.Lista;
import DataStructure.Nodo;

public class AFN {
    private int edo; //indicador de estado
    private int pointA, pointB; //Punteros de la cadena
    public Lista listaTokens = new Lista(null); //Lista a utilizar
    int finCadena;
    //Array para simbolos
    private char[] cs = {';', '=', '+', '-', '*', '(', ')' };
    //Array para palabras reservadas
    private String[] reservadas = {"program", "begin", "end"};
    
    public AFN(){
        this.edo = 0;
        pointA = 0;
        pointB = 0;
    }
    
    //Metodo que modela el funcionamiento del AFN diseñado para el
    //analizador lexico
    private void afnToken(String cadena){
        System.out.println("Point A: " + pointA + " Point B: "+pointB);
        switch(edo){   
            case 0:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                //IF PARA IDENTIFICADORES
                if(esEspacio(cadena)){
                    pointB++;
                    pointA = pointB;
                }
                else if(esLetraMayuscula(cadena)){
                    edo = 1;
                    pointB++; //aumenta a la siguiente posición
                } 
                //IF PARA NUMEROS
                else if(esNumero(cadena)){
                    edo = 5;
                    pointB++;
                } 
                //IF PARA SIMBOLOS
                else if(esSimbolo(cadena.charAt(pointB))){
                    if(esFinalDeLinea(cadena)){
                        edo = 9;
                    }else{
                        edo = 9;
                    }
                }           
                //IF PARA PALABRAS RESERVADAS
                else if (esLetraMinuscula(cadena)){
                    edo=10;
                    pointB++;
                }         
                //IF PARA ERRORES
                else{
                    edo = 4;
                }
                break;
            //ESTADO PARA IDENTIFICADORES
            case 1: 
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esLetraMinuscula(cadena) || esNumero(cadena)){
                    edo = 1;
                    if(esFinalDeLinea(cadena)){
                        edo = 2;
                        break;
                    }
                    pointB++;
                }else if(esGuionBajo(cadena)){
                    edo = 3;
                    pointB++;
                } else{
                    if(esFinalDeLinea(cadena) || esEspacio(cadena) || esSimbolo(cadena.charAt(pointB))){
                        
                        edo = 2;
                    }
                    else{
                        edo = 4;
                    }   
                }
                break;
            case 2:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esFinalDeLinea(cadena)) {
                    System.out.println("Si entro aqui");
                    pointB=cadena.length();
                    System.out.println("Point A: " + pointA + " Point B: "+pointB);
                }
                if(esSimbolo(cadena.charAt(pointB-1))){
                    --pointB;
                }
                //else if(esSimbolo(cadena.charAt(pointB))) pointB--;
                generarToken(cadena.substring(pointA,pointB), 500);
                
                actualizaApuntadores();
                break;
                
            case 3:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if ((esLetraMinuscula(cadena)) || esNumero(cadena)){
                    pointB++;
                    if(esFinalDeLinea(cadena) || esEspacio(cadena)){
                        edo = 2;
                    }else{
                        edo = 3;
                        pointB ++;
                    }
                }
                else{
                    edo = 4; //Si no es alguno de esos, mandar a generar el token
                }
             break;
            case 4:
                //ESTADO DE ERROR LEXICO
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esFinalDeLinea(cadena)) pointB=cadena.length();
                generarToken(cadena.substring(pointA,pointB), 404);
                actualizaApuntadores();
                break;
            case 5:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esNumero(cadena)){
                    if(esFinalDeLinea(cadena) || esEspacio(cadena)){
                        edo = 6;
                    }else{
                        edo = 5;
                        pointB ++;
                    }
                } else if(esPunto(cadena)){
                    edo = 7;
                    pointB++;
                } else{
                    edo = 6;
                }
                break;
            case 6:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esFinalDeLinea(cadena)) {
                    pointB=cadena.length();
                }
                generarToken(cadena.substring(pointA,pointB), 501);
                actualizaApuntadores();
                break;
            case 7:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esNumero(cadena)){
                    edo = 7;
                    pointB++;
                } else{
                    edo = 8;
                }
                break;
            case 8:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esFinalDeLinea(cadena)) pointB = cadena.length();
                if(esSimbolo(cadena.charAt(pointB-1))){
                    --pointB;
                }
                generarToken(cadena.substring(pointA,pointB), 502);
                actualizaApuntadores();
                break;
            case 9:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointA));
                generarToken(String.valueOf(cadena.charAt(pointA)), (int)cadena.charAt(pointA));
                pointB++;
                actualizaApuntadores();
                break;
            case 10:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esLetraMinuscula(cadena)){
                    if(esFinalDeLinea(cadena) || esEspacio(cadena)){
                        edo = 11;
                    }else{
                        edo = 10;
                        pointB ++;
                    }
                }else{
                    edo = 11;
                }
                break;
            case 11:
                System.out.println("Estado " + edo +" Letra: " + cadena.charAt(pointB) +" Lexema:"+cadena.substring(pointA, pointB));
                if(esFinalDeLinea(cadena)) pointB=cadena.length();
                if(esReservada(cadena.substring(pointA, pointB))){
                    generarToken(cadena.substring(pointA, pointB), 200);
                    actualizaApuntadores();
                }else
                    edo=4;

                break;
        }
    }  
    /*
        Metodos donde se filtran los caracteres
    */
    private boolean esLetraMinuscula(String cadena){
       return cadena.charAt(pointB) >=  'a' && cadena.charAt(pointB) <=  'z';
    }
    
    private boolean esLetraMayuscula(String cadena){
        return cadena.charAt(pointB) >=  'A' && cadena.charAt(pointB) <=  'Z';
    }
    
    private boolean esNumero(String cadena){
        return cadena.charAt(pointB) >=  '0' && cadena.charAt(pointB) <=  '9';
    }
    
    private boolean esEspacio(String cadena){
        return cadena.charAt(pointB) == ' ';
    }
    
    private boolean esPunto(String cadena){
        return cadena.charAt(pointB) == '.';
    }
    
    private boolean esFinalDeLinea(String cadena){
        return pointB == cadena.length()-1;
    }
    
    private boolean esGuionBajo(String cadena){
        return cadena.charAt(pointB) == '_';
    }
    
    private boolean esSimbolo(char caracter){
        boolean flag = false;
        for(char s : cs)
            if(caracter == s){
                flag=true;
                break;
            }
        return flag;                
    }
    
    private boolean esReservada(String caracter){
        boolean flag = false;
        for(String s : reservadas)
            if(caracter.equals(s)){
                flag=true;
                break;
            }
        return flag;                
    }
    /*
        Fin filtrado de caracteres
    */
    
    //Metodo que genera un token
    private void generarToken(String lexema,int identificador){
        System.out.println("Token Generado");
        for (int i = 0; i < reservadas.length; i++) {
            if(lexema.equals(reservadas[i])){
                identificador = 1;
            }
        }
        Token tk = new Token(identificador, lexema);
        listaTokens.agregarNodo(new Nodo(tk));
    }
    
    //Se actualizan los apuntadores para poder iniciar de nuevo en el AFN
    private void actualizaApuntadores(){
        pointA = pointB;
        edo = 0;
    }
    
    public void AnalizaLinea(String cadena){
        System.out.println(cadena.length());
        while(pointB<cadena.length()){
            afnToken(cadena);
        }
    }
    
    public void imprimeTokens(){
        listaTokens.imprimeTokens();
    }
    
    public void imprimeSimbolos(){
        System.out.println("Tabla estatica de simbolos");
        for(char c: cs) System.out.println(c);
        System.out.println("");
        System.out.println("Simbolos Detectados");
        listaTokens.imprimeSimbolos();
    }
    
    public void imprimeReservadas(){
        System.out.println("Tabla estatica de palabras reservadas");
        for(String c: reservadas) System.out.println(c);
        System.out.println("");
        System.out.println("Palabras Reservadas Detectadas");
        listaTokens.imprimeReservadas();
    }
    
    public void imprimeError(){
        listaTokens.imprimeError();
    }
    
    public void reiniciarEstado(){
        edo=0;
        pointB=0;
        pointA=0;
    }
}

